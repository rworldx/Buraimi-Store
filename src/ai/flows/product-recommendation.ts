// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Recommends products based on the items in the user's cart and their purchase history.
 *
 * - recommendProducts - A function that takes a cart and user history, and returns a list of recommended products.
 * - RecommendProductsInput - The input type for the recommendProducts function.
 * - RecommendProductsOutput - The return type for the recommendProducts function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProductSchema = z.object({
  productId: z.string().describe('The unique identifier for the product.'),
  name: z.string().describe('The name of the product.'),
  description: z.string().describe('A short description of the product.'),
  imageUrl: z.string().describe('URL of the product image.'),
  price: z.number().describe('The price of the product.'),
  category: z.string().describe('Category of the product'),
});

const RecommendProductsInputSchema = z.object({
  cartItems: z.array(ProductSchema).optional().describe('The items currently in the user\'s shopping cart.'),
  userPurchaseHistory: z.array(ProductSchema).optional().describe('The user\'s past purchases.'),
  userProfile: z.string().optional().describe('Description of the user profile such as interests, profession, age etc.'),
  numberOfRecommendations: z.number().default(3).describe('Number of products to return'),
});
export type RecommendProductsInput = z.infer<typeof RecommendProductsInputSchema>;

const RecommendProductsOutputSchema = z.array(ProductSchema).describe('A list of recommended products.');
export type RecommendProductsOutput = z.infer<typeof RecommendProductsOutputSchema>;

export async function recommendProducts(input: RecommendProductsInput): Promise<RecommendProductsOutput> {
  return recommendProductsFlow(input);
}

const shouldRecommendTool = ai.defineTool({
  name: 'shouldRecommend',
  description: 'Determines if a product matches a user\'s interests based on their profile and past purchases.',
  inputSchema: z.object({
    product: ProductSchema,
    userProfile: z.string().optional().describe('Description of the user profile such as interests, profession, age etc.'),
  }),
  outputSchema: z.boolean(),
}, async (input) => {
  // Dummy implementation - replace with actual logic to determine if a product is a good recommendation
  // based on user profile and product category.
  if (!input.userProfile) {
    return false;
  }
  return input.product.category.toLowerCase().includes(input.userProfile.toLowerCase().split(' ')[0]);
});

const productRecommendationPrompt = ai.definePrompt({
  name: 'productRecommendationPrompt',
  tools: [shouldRecommendTool],
  input: {schema: RecommendProductsInputSchema},
  output: {schema: RecommendProductsOutputSchema},
  prompt: `You are an expert product recommendation engine.

  Based on the items in the user's cart and their purchase history, recommend other products that they might be interested in. 
  Return a maximum of {{{numberOfRecommendations}}} products in the list.
  Consider the user profile when recommending a product using the shouldRecommendTool.

  Here's the user's cart:
  {{#if cartItems}}
    {{#each cartItems}}
      - {{this.name}} ({{this.description}})
    {{/each}}
  {{else}}
    The user has nothing in their cart.
  {{/if}}

  Here's the user's purchase history:
  {{#if userPurchaseHistory}}
    {{#each userPurchaseHistory}}
      - {{this.name}} ({{this.description}})
    {{/each}}
  {{else}}
    The user has no purchase history.
  {{/if}}

  Here's the user's profile:
  {{#if userProfile}}
    {{{userProfile}}}
  {{else}}
    The user has no profile specified.
  {{/if}}
  
  Return only the list of products that would be a good recommendation.
  `, config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const recommendProductsFlow = ai.defineFlow(
  {
    name: 'recommendProductsFlow',
    inputSchema: RecommendProductsInputSchema,
    outputSchema: RecommendProductsOutputSchema,
  },
  async input => {
    const {output} = await productRecommendationPrompt(input);
    return output!;
  }
);
